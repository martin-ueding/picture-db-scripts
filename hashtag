#!/usr/bin/python
# -*- coding: utf-8 -*-

# Copyright Â© 2012 Martin Ueding <dev@martin-ueding.de>

import argparse
import os.path
import sys

import prettytable

import picturedb

def main():
    options = _parse_args()

    if not options.add is None:
        print "Tags to add:"
        print ', '.join(sorted(set(options.add)))
        print

    handle_files(options.filenames, options)



def handle_folder(path, options):
    files = []

    for f in os.listdir(path):
        if os.path.isdir(f):
            handle_folder(f, options)
        else:
            files.append(f)

    if len(files) > 0:
        handle_files(files, options)


def handle_files(files, options):
    table_data = []
    images = []
    for f in sorted(files):
        image = picturedb.Image(f)

        dirname = os.path.dirname(f)
        oldname = os.path.basename(f)
    
        if not options.add is None:
            for tag in options.add:
                image.add_tag(picturedb.Tag(tag))

        newname = os.path.basename(image.current_path())

        if oldname != newname:
            images.append(image)
            table_data.append([dirname, oldname, newname])

    if len(table_data) == 0:
        return

    prettytable.print_table(
        ["directory", "old name", "new name"],
        table_data
    )

    print
    answer = raw_input("Rename files? [Y/n] ")

    if answer != "n":
        for image in images:
            try:
                image.rename()
            except OSError as e:
                print image, e


def _parse_args():
    """
    Parses the command line arguments.

    @return: Namespace with arguments.
    @rtype: Namespace
    """
    parser = argparse.ArgumentParser(usage="%(prog)s [options --] filenames", description="")
    parser.add_argument('-a', "--add", metavar='tags', type=str, nargs='*', help='Tag to add.')
    parser.add_argument('filenames', metavar='filenames', type=str, nargs='+', help='Files to process.')
    #parser.add_argument("", dest="", type="", default=, help=)
    #parser.add_argument('--version', action='version', version='<the version>')

    return parser.parse_args()


if __name__ == "__main__":
    main()
