#!/usr/bin/python
# -*- coding: utf-8 -*-

# Copyright Â© 2012-2013 Martin Ueding <dev@martin-ueding.de>

from prettytable import PrettyTable
import argparse
import os.path
import sys

import picturedb

__docformat__ = "restructuredtext en"

def main():
    options = _parse_args()

    if not options.add is None:
        print "Tags to add:"
        print ', '.join(sorted(set(options.add)))
        print

    handle_input(options.filenames, options)

def handle_input(paths, options):
    files = []
    folders = []

    for path in paths:
        if os.path.isdir(path):
            folders.append(path)
        elif os.path.isfile(path):
            files.append(path)

    for folder in folders:
        try:
            handle_input([os.path.join(folder, filename) for filename in os.listdir(folder)], options)
        except picturedb.PictureDBError as e:
            print e

    if len(files) > 0:
        handle_files(files, options)

def handle_files(files, options):
    table_data = []
    changed = []

    file_list = sorted(files)

    # Create objects for every filename, but exclude backup files.
    all_images = [picturedb.Image(f) for f in file_list if not f.endswith('~')]

    if options.c:
        picturedb.compress_numbers(all_images)

    t = PrettyTable(["directory", "old name", "new name"])
    t.align = 'l'

    for image in all_images:
        dirname = image.dirname
        oldname = os.path.basename(image.origname)
    
        if not options.add is None:
            for tag in options.add:
                image.add_tag(picturedb.Tag(tag))

        if not options.remove is None:
            for tag in options.remove:
                image.remove_tag(picturedb.Tag(tag))

        newname = os.path.basename(image.current_path())

        if image.name_changed() or (image.iptc_changed() and options.iptc):
            changed.append(image)
            t.add_row([dirname, oldname, newname])

    if len(changed) == 0:
        return

    print
    print t
    print

    if options.y:
        answer = "y"
    else:
        answer = raw_input("Rename files? [Y/n] ")

    if answer != "n":
        if options.iptc:
            for image in changed:
                image.save()
        else:
            picturedb.batch_rename(changed)

def _parse_args():
    """
    Parses the command line arguments.

    :return: Namespace with arguments.
    :rtype: Namespace
    """
    parser = argparse.ArgumentParser(description="Tool to manage the picture database.")
    parser.add_argument('-a', "--add", metavar='tags', type=str, nargs='*', help='Tag to add.')
    parser.add_argument('-c', action='store_true', help='Compress numbers')
    parser.add_argument('-r', "--remove", metavar='tags', type=str, nargs='*', help='Tag to remove.')
    parser.add_argument('--iptc', action="store_true", help='Write IPTC tags.')
    parser.add_argument('-y', action="store_true", help="Don't ask questions")
    parser.add_argument('filenames', metavar='filename', type=str, nargs='+', help='File to process.')
    #parser.add_argument("", dest="", type="", default=, help=)
    #parser.add_argument('--version', action='version', version='<the version>')

    return parser.parse_args()

if __name__ == "__main__":
    main()
