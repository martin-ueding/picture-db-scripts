#!/usr/bin/python
# -*- coding: utf-8 -*-

# Copyright (c) 2011 Martin Ueding <dev@martin-ueding.de>

import glob
import os
import re
import shutil
import sys

def parse_folder_name(name):
    """
    Parses date and event name from a folder name.

    If the folder does not match, return C{None}.

    @param name: Folder name
    @type name: str
    @return: Date, event name.
    @rtype: tuple
    """
    pattern = re.compile(r"(2\d{3}[01]\d[0123]\d)-([^/]+)/?")
    m = pattern.match(name)
    if m is not None:
        return m.group(1), m.group(2)

    return None


def parse_file_name(name):
    """
    Parses date, eventname and number from a image file.

    If the image file name does not match, return C{None}.

    @param name: Folder name
    @type name: str
    @return: Date, eventname, number.
    @rtype: tuple
    """
    pattern = re.compile(r"(2\d{3}[01]\d[0123]\d)-([^-]+)-(\d+).*\..*")
    m = pattern.match(name)
    if m is not None:
        return m.group(1), m.group(2), m.group(3)

    return None


def find_number(name):
    """
    Tries to find a number in the image file.

    @param name: Image file name.
    @type name: str
    @return: Number, suffix.
    @rtype: tuple
    """
    pattern = re.compile(r"\D*(\d+)\D*[^.]*\.(.*)")
    m = pattern.match(name)
    if m is not None:
        return m.group(1), m.group(2)

    return None


def new_name(folder, date, name, number, suffix):
    """
    Generates a new name from given data.

    @param folder: Folder the files goes into.
    @type folder: str
    @param date: Date string.
    @type date: str
    @param name: Event name.
    @type name: str
    @param number: Image number.
    @type number: str
    @param suffix: File suffix.
    @type suffix: str
    @return: Generated filename.
    @rtype: str
    """
    n = "%s/%s-%s-%s.%s" % (folder, date, name, number, suffix)
    n = n.replace(r"//", r"/")
    return n


def ask_rename(old, new):
    """
    Renames a file after asking.

    Asks the user whether the file should be renamed. If accepted, the file is
    renamed.

    @param old: Old filename.
    @type old: str
    @param new: New filename.
    @type new: str
    """
    answer = raw_input("rename? [y/N] ")
    if answer == "y":
        shutil.move(old, new)


def main():
    show_good = True
    show_folders = True

    files = sys.argv[1:]

    for f in files:
        # Skip this folder if it cannot be parsed.
        folder_info = parse_folder_name(f)
        if folder_info is None:
            continue

        # Print the folder.
        if show_folders:
            print f, folder_info

        # Iterate through all the pictures.
        for pic in sorted(glob.iglob(f+"/*")):
            if not os.path.isfile(pic):
                continue

            # Try to parse the picture file name.
            nameparts = parse_file_name(os.path.basename(pic))

            # If the file name was not parsed correctly, try to find a number
            # in the image file name.
            if nameparts is None:
                num = find_number(os.path.basename(pic))
                if num is not None:
                    number, suffix = num
                else:
                    # If no number could be found, state it.
                    print "Problem:", pic
                    continue

                # Find the next free number, increase if number is not free.
                while True:
                    newname = new_name(f, folder_info[0], folder_info[1], number, suffix)
                    if not os.path.exists(newname):
                        break
                    number = str(int(number)+1)

                # Print old and new file name.
                print pic.ljust(50, '.'), newname.ljust(50),

                # Rename.
                ask_rename(pic, newname)

            else:
                # Show the images that was parsed correctly.
                if show_good:
                    print pic, nameparts


if __name__ == "__main__":
	main()
