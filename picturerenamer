#!/usr/bin/python
# -*- coding: utf-8 -*-

# Copyright (c) 2011-2012 Martin Ueding <dev@martin-ueding.de>

"""
Renames picture files according to a strict directory layout.

The ideal filename is::

    YYYYMMDD-Event/YYYYMMDD-Event-0000.jpg

Most files are in correctly named folder, the images lack proper names though.
This script parses the date and event name from the folder name and renames the
images. The image number is chosen from any number found in the filename. That
way, some order is preserved and the file can be tracked through the rename.
"""

import glob
import optparse
import os
import re
import shutil
import sys

import prettytable

def ask_rename(renames):
    """
    Renames a batch of files after asking.

    @param new: List with lists of old and new names.
    @type new: list
    """
    prettytable.print_table(
        ["old name", "new name"],
        renames,
    )
    answer = raw_input("rename this batch? [y/N] ")
    if answer == "y":
        for old, new in renames:
            if not os.path.isfile(new):
                shutil.move(old, new)


def main():
    show_good = True
    show_folders = True

    options, args = _parse_args()

    if len(args) == 0:
        print "picturerenamer files..."
        sys.exit(1)

    files = args

    for f in files:
        if options.verbose:
            print f

        # Skip this folder if it cannot be parsed.
        folder_info = parse_folder_name(f)
        if folder_info is None:
            continue

        if options.verbose:
            print folder_info

        # Print the folder.
        if show_folders:
            print f, folder_info

        renames = []

        # Iterate through all the pictures.
        for pic in sorted(glob.iglob(f+"/*")):
            if not os.path.isfile(pic):
                continue


            # Try to parse the picture file name.
            nameparts = parse_file_name(os.path.basename(pic))

            if nameparts is None:
                # If the file name was not parsed correctly, try to find a
                # number in the image file name.
                num = find_number(os.path.basename(pic))
                if num is not None:
                    number, suffix = num
                else:
                    # If no number could be found, state it.
                    print "Problem:", pic
                    continue

                # Find the next free number, increase if number is not free.
                while True:
                    newname = new_name(f, folder_info[0], folder_info[1], number, find_tags(os.path.basename(pic)), suffix)
                    if not os.path.exists(newname) and newname not in [rename[1] for rename in renames]:
                        break
                    number = str(int(number)+1)

                renames.append([pic, newname])


            else:
                # Show the images that was parsed correctly.
                if show_good:
                    print pic, nameparts

        # Rename.
        if len(renames) > 0:
            print
            ask_rename(renames)


def _parse_args():
    """
    Parses the command line arguments.

    @return: Tuple with options and (positional) arguments.
    @rtype: tuple
    """
    parser = optparse.OptionParser(usage="", description="")
    parser.add_option("-v", dest="verbose", action="store_true", default=False, help="Be verbose.")

    return parser.parse_args()


if __name__ == "__main__":
	main()
